CREATE OR ALTER PROCEDURE CLIENT_MANAGER.USER_AUTHORIZATION
(
	@USERNAME NVARCHAR(50),
	@CRYPTPASSWORD NVARCHAR(50),
	@USER_ID INT OUTPUT,
	@PERMISSIONS_LEVEL INT OUTPUT
)
AS BEGIN

	SELECT
		@USER_ID = ID,
		@PERMISSIONS_LEVEL = PERMISSIONS_LEVEL
	FROM CLIENT_MANAGER.USERS
	WHERE USER_LOGIN = @USERNAME AND ENCRYPTED_PASSWORD = @CRYPTPASSWORD

END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.CREATE_CLIENT
(
	@CLIENT_NAME VARCHAR(50),
	@CLIENT_SURNAME VARCHAR(50),
	@GENDER BIT,
	@MANAGER_ID BIT,
	@CLIENT_ID INT OUTPUT
)
AS BEGIN

	INSERT INTO CLIENT_MANAGER.CLIENTS(CLIENT_SURNAME, CLIENT_NAME, GENDER, MANAGER_ID)
	VALUES (@CLIENT_SURNAME, @CLIENT_NAME, @GENDER, @MANAGER_ID)

	SELECT @CLIENT_ID = SCOPE_IDENTITY();

END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.GET_USER_CLIENTS
(
	@USER_ID VARCHAR(50),
	@PAGE_NO INT,
	@ITEMS_PER_PAGE INT
)
AS BEGIN
	SELECT @PAGE_NO = @PAGE_NO - 1

	SELECT
		C.ID,
		C.CLIENT_NAME,
		C.CLIENT_SURNAME,
		C.GENDER,
		CASE
			WHEN SUM(A.BALANCE) > 5000
		THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS IS_VIP
	FROM CLIENT_MANAGER.CLIENTS AS C
	LEFT JOIN CLIENT_MANAGER.CLIENT_ACCOUNTS AS A
		ON C.ID = A.CLIENT_ID
	WHERE MANAGER_ID = @USER_ID
	GROUP BY C.ID,
		C.CLIENT_NAME,
		C.CLIENT_SURNAME,
		C.GENDER
	ORDER BY C.ID
	OFFSET @PAGE_NO * @ITEMS_PER_PAGE ROWS
	FETCH NEXT @ITEMS_PER_PAGE ROWS ONLY
END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.GET_ALL_USERS
AS BEGIN
	SELECT
		USER_LOGIN,
		PERMISSIONS_LEVEL
	FROM CLIENT_MANAGER.USERS
END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.UPDATE_USER_PERMISSIONS_LEVEL
	@USER_LOGIN NVARCHAR(50),
	@PERMISSIONS_LEVEL TINYINT
AS BEGIN
	UPDATE CLIENT_MANAGER.USERS
		SET PERMISSIONS_LEVEL = @PERMISSIONS_LEVEL
	WHERE USER_LOGIN = @USER_LOGIN
END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.GET_CLIENT_ACCOUNTS
	@CLIENT_ID INT
AS BEGIN
	SELECT
		ID,
		CODE,
		BALANCE
	FROM CLIENT_MANAGER.CLIENT_ACCOUNTS
	WHERE CLIENT_ID = @CLIENT_ID
END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.UPDATE_CLIENT_INFO
	@CLIENT_ID INT,
	@CLIENT_NAME NVARCHAR(50),
	@CLIENT_SURNAME NVARCHAR(50)
AS BEGIN
	UPDATE CLIENT_MANAGER.CLIENTS
		SET CLIENT_NAME = @CLIENT_NAME,
		CLIENT_SURNAME = @CLIENT_SURNAME
	WHERE ID = @CLIENT_ID
END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.IS_USER_EXISTS
	@USER_LOGIN NVARCHAR(50)
AS BEGIN
	IF EXISTS ( SELECT 1 FROM CLIENT_MANAGER.USERS WHERE USER_LOGIN = @USER_LOGIN )
		SELECT CAST(1 AS BIT)
	ELSE
		SELECT CAST(0 AS BIT)
END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.USER_REGISTRATION
(
	@USER_LOGIN VARCHAR(50),
	@CRYPTPASSWORD NVARCHAR(50)
)
AS BEGIN

	INSERT INTO CLIENT_MANAGER.USERS(USER_LOGIN, ENCRYPTED_PASSWORD)
	VALUES (@USER_LOGIN, @CRYPTPASSWORD)

END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.GET_CLIENT_BY_ACCOUNT
(
	@ACCOUNT_CODE VARCHAR(10)
)
AS BEGIN

	SELECT
		C.ID,
		C.CLIENT_NAME,
		C.CLIENT_SURNAME
	FROM CLIENT_MANAGER.CLIENT_ACCOUNTS AS A
		JOIN CLIENT_MANAGER.CLIENTS AS C
		ON A.CLIENT_ID = C.ID
	WHERE A.CODE = @ACCOUNT_CODE

END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.CREATE_TRANSACTION
	@CLIENT_FROM INT,
	@CLIENT_TO INT,
	@ACCOUNT_FROM NVARCHAR(10),
	@ACCOUNT_TO NVARCHAR(10),
	@AMOUNT DECIMAL(20, 4),
	@IS_IMIDIATE BIT
AS BEGIN
	
	INSERT INTO CLIENT_MANAGER.TRANSACTIONS(CLIENT_FROM, CLIENT_TO, ACCOUNT_FROM, ACCOUNT_TO, AMOUNT, CREATION_DATE_TIME, TRANSFER_DATE_TIME)
	VALUES (@CLIENT_FROM, @CLIENT_TO, @ACCOUNT_FROM, @ACCOUNT_TO, @AMOUNT, GETDATE(), CASE @IS_IMIDIATE WHEN 1 THEN GETDATE() ELSE NULL END)

END;
GO

CREATE OR ALTER PROCEDURE CLIENT_MANAGER.GET_TRANSACTIONS_BY_FILTER
(
	@CLIENT_FROM INT NULL,
	@CLIENT_TO INT NULL
)
AS BEGIN

	SELECT
		T.CLIENT_FROM,
		T.CLIENT_TO,
		C_FROM.CLIENT_SURNAME AS CLIENT_SURNAME_FROM,
		C_FROM.CLIENT_NAME AS CLIENT_NAME_FROM,
		C_TO.CLIENT_SURNAME AS CLIENT_SURNAME_TO,
		C_TO.CLIENT_NAME AS CLIENT_NAME_TO,
		T.ACCOUNT_FROM,
		T.ACCOUNT_TO,
		T.AMOUNT,
		T.CREATION_DATE_TIME,
		T.TRANSFER_DATE_TIME
	FROM CLIENT_MANAGER.TRANSACTIONS AS T
	JOIN CLIENT_MANAGER.CLIENTS AS C_FROM
		ON T.CLIENT_FROM = C_FROM.ID
	JOIN CLIENT_MANAGER.CLIENTS AS C_TO
		ON T.CLIENT_TO = C_TO.ID
	WHERE T.CLIENT_FROM = ISNULL(@CLIENT_FROM, CLIENT_FROM)
		AND T.CLIENT_TO = ISNULL(@CLIENT_TO, CLIENT_TO)

END;
GO